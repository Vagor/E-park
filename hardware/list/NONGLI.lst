C51 COMPILER V9.00   NONGLI                                                                09/01/2015 10:49:23 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NONGLI
OBJECT MODULE PLACED IN .\obj\NONGLI.obj
COMPILER INVOKED BY: D:\Program Files (x86)\KeilC51\C51\BIN\C51.EXE 源码\NONGLI.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list
                    -\NONGLI.lst) OBJECT(.\obj\NONGLI.obj)

line level    source

   1          
   2          #include"config.h"
   3          
   4          /****************************************************/
   5          /* 获取当前日期的农历及星期*/
   6          /****************************************************/
   7          /*==================================================*/
   8          /*公历年对应的农历数据,每年三字节, 格式: */
   9          /*第一字节BIT7-4 位表示闰月月份,值为0 为无闰月, */
  10          /*BIT3-0 对应农历第1-4 月的大小*/
  11          /*第二字节BIT7-0 对应农历第5-12 月大小, */
  12          /*第三字节BIT7 表示农历第13 个月大小月份对应的位*/
  13          /*为1 表示本农历月大(30 天),为0 表示小(29 天) */
  14          /*第三字节BIT6-5 表示春节的公历月份,BIT4-0 表示春节的公历日期*/
  15          /*类型:Byte:unsigned char Word:unsigned int */
  16          /*本代码中Tim[0]/Tim[1]/Tim[2]分别为当前年月日数据*/
  17          /*其中Tim[0]Bit7 表示世纪,1 为20 世纪19xx,0 为21 世纪20xx*/
  18          /*Tim[10]为周数据/Tim[7]/Tim[8]/Tim[9]为农历数据,根据需要自行更换*/
  19          /*==================================================*/
  20          
  21          data uchar YEAR_MOON,MONTH_MOON,DAY_MOON,WEEK_MOON;
  22          
  23          uchar code year_code[597]={
  24          0x04,0xAe,0x53,0x0A,0x57,0x48,0x55,0x26,0xBd, // 1901-1903
  25          0x0d,0x26,0x50,0x0d,0x95,0x44,0x46,0xAA,0xB9, // 1904-1906
  26          0x05,0x6A,0x4d,0x09,0xAd,0x42,0x24,0xAe,0xB6, // 1907-1909
  27          0x04,0xAe,0x4A,0x6A,0x4d,0xBe,0x0A,0x4d,0x52, // 1910-1912
  28          0x0d,0x25,0x46,0x5d,0x52,0xBA,0x0B,0x54,0x4e, // 1913-1915
  29          0x0d,0x6A,0x43,0x29,0x6d,0x37,0x09,0x5B,0x4B, // 1916-1918
  30          0x74,0x9B,0xC1,0x04,0x97,0x54,0x0A,0x4B,0x48, // 1919-1921
  31          0x5B,0x25,0xBC,0x06,0xA5,0x50,0x06,0xd4,0x45, // 1922-1924
  32          0x4A,0xdA,0xB8,0x02,0xB6,0x4d,0x09,0x57,0x42, // 1925-1927
  33          0x24,0x97,0xB7,0x04,0x97,0x4A,0x66,0x4B,0x3e, // 1928-1930
  34          0x0d,0x4A,0x51,0x0e,0xA5,0x46,0x56,0xd4,0xBA, // 1931-1933
  35          0x05,0xAd,0x4e,0x02,0xB6,0x44,0x39,0x37,0x38, // 1934-1936
  36          0x09,0x2e,0x4B,0x7C,0x96,0xBf,0x0C,0x95,0x53, // 1937-1939
  37          0x0d,0x4A,0x48,0x6d,0xA5,0x3B,0x0B,0x55,0x4f, // 1940-1942
  38          0x05,0x6A,0x45,0x4A,0xAd,0xB9,0x02,0x5d,0x4d, // 1943-1945
  39          0x09,0x2d,0x42,0x2C,0x95,0xB6,0x0A,0x95,0x4A, // 1946-1948
  40          0x7B,0x4A,0xBd,0x06,0xCA,0x51,0x0B,0x55,0x46, // 1949-1951
  41          0x55,0x5A,0xBB,0x04,0xdA,0x4e,0x0A,0x5B,0x43, // 1952-1954
  42          0x35,0x2B,0xB8,0x05,0x2B,0x4C,0x8A,0x95,0x3f, // 1955-1957
  43          0x0e,0x95,0x52,0x06,0xAA,0x48,0x7A,0xd5,0x3C, // 1958-1960
  44          0x0A,0xB5,0x4f,0x04,0xB6,0x45,0x4A,0x57,0x39, // 1961-1963
  45          0x0A,0x57,0x4d,0x05,0x26,0x42,0x3e,0x93,0x35, // 1964-1966
  46          0x0d,0x95,0x49,0x75,0xAA,0xBe,0x05,0x6A,0x51, // 1967-1969
  47          0x09,0x6d,0x46,0x54,0xAe,0xBB,0x04,0xAd,0x4f, // 1970-1972
  48          0x0A,0x4d,0x43,0x4d,0x26,0xB7,0x0d,0x25,0x4B, // 1973-1975
  49          0x8d,0x52,0xBf,0x0B,0x54,0x52,0x0B,0x6A,0x47, // 1976-1978
  50          0x69,0x6d,0x3C,0x09,0x5B,0x50,0x04,0x9B,0x45, // 1979-1981
  51          0x4A,0x4B,0xB9,0x0A,0x4B,0x4d,0xAB,0x25,0xC2, // 1982-1984
  52          0x06,0xA5,0x54,0x06,0xd4,0x49,0x6A,0xdA,0x3d, // 1985-1987
  53          0x0A,0xB6,0x51,0x09,0x37,0x46,0x54,0x97,0xBB, // 1988-1990
  54          0x04,0x97,0x4f,0x06,0x4B,0x44,0x36,0xA5,0x37, // 1991-1993
C51 COMPILER V9.00   NONGLI                                                                09/01/2015 10:49:23 PAGE 2   

  55          0x0e,0xA5,0x4A,0x86,0xB2,0xBf,0x05,0xAC,0x53, // 1994-1996
  56          0x0A,0xB6,0x47,0x59,0x36,0xBC,0x09,0x2e,0x50, // 1997-1999
  57          0x0C,0x96,0x45,0x4d,0x4A,0xB8,0x0d,0x4A,0x4C, // 2000-2002
  58          0x0d,0xA5,0x41,0x25,0xAA,0xB6,0x05,0x6A,0x49, // 2003-2005
  59          0x7A,0xAd,0xBd,0x02,0x5d,0x52,0x09,0x2d,0x47, // 2006-2008
  60          0x5C,0x95,0xBA,0x0A,0x95,0x4e,0x0B,0x4A,0x43, // 2009-2011
  61          0x4B,0x55,0x37,0x0A,0xd5,0x4A,0x95,0x5A,0xBf, // 2012-2014
  62          0x04,0xBA,0x53,0x0A,0x5B,0x48,0x65,0x2B,0xBC, // 2015-2017
  63          0x05,0x2B,0x50,0x0A,0x93,0x45,0x47,0x4A,0xB9, // 2018-2020
  64          0x06,0xAA,0x4C,0x0A,0xd5,0x41,0x24,0xdA,0xB6, // 2021-2023
  65          0x04,0xB6,0x4A,0x69,0x57,0x3d,0x0A,0x4e,0x51, // 2024-2026
  66          0x0d,0x26,0x46,0x5e,0x93,0x3A,0x0d,0x53,0x4d, // 2027-2029
  67          0x05,0xAA,0x43,0x36,0xB5,0x37,0x09,0x6d,0x4B, // 2030-2032
  68          0xB4,0xAe,0xBf,0x04,0xAd,0x53,0x0A,0x4d,0x48, // 2033-2035
  69          0x6d,0x25,0xBC,0x0d,0x25,0x4f,0x0d,0x52,0x44, // 2036-2038
  70          0x5d,0xAA,0x38,0x0B,0x5A,0x4C,0x05,0x6d,0x41, // 2039-2041
  71          0x24,0xAd,0xB6,0x04,0x9B,0x4A,0x7A,0x4B,0xBe, // 2042-2044
  72          0x0A,0x4B,0x51,0x0A,0xA5,0x46,0x5B,0x52,0xBA, // 2045-2047
  73          0x06,0xd2,0x4e,0x0A,0xdA,0x42,0x35,0x5B,0x37, // 2048-2050
  74          0x09,0x37,0x4B,0x84,0x97,0xC1,0x04,0x97,0x53, // 2051-2053
  75          0x06,0x4B,0x48,0x66,0xA5,0x3C,0x0e,0xA5,0x4f, // 2054-2056
  76          0x06,0xB2,0x44,0x4A,0xB6,0x38,0x0A,0xAe,0x4C, // 2057-2059
  77          0x09,0x2e,0x42,0x3C,0x97,0x35,0x0C,0x96,0x49, // 2060-2062
  78          0x7d,0x4A,0xBd,0x0d,0x4A,0x51,0x0d,0xA5,0x45, // 2063-2065
  79          0x55,0xAA,0xBA,0x05,0x6A,0x4e,0x0A,0x6d,0x43, // 2066-2068
  80          0x45,0x2e,0xB7,0x05,0x2d,0x4B,0x8A,0x95,0xBf, // 2069-2071
  81          0x0A,0x95,0x53,0x0B,0x4A,0x47,0x6B,0x55,0x3B, // 2072-2074
  82          0x0A,0xd5,0x4f,0x05,0x5A,0x45,0x4A,0x5d,0x38, // 2075-2077
  83          0x0A,0x5B,0x4C,0x05,0x2B,0x42,0x3A,0x93,0xB6, // 2078-2080
  84          0x06,0x93,0x49,0x77,0x29,0xBd,0x06,0xAA,0x51, // 2081-2083
  85          0x0A,0xd5,0x46,0x54,0xdA,0xBA,0x04,0xB6,0x4e, // 2084-2086
  86          0x0A,0x57,0x43,0x45,0x27,0x38,0x0d,0x26,0x4A, // 2087-2089
  87          0x8e,0x93,0x3e,0x0d,0x52,0x52,0x0d,0xAA,0x47, // 2090-2092
  88          0x66,0xB5,0x3B,0x05,0x6d,0x4f,0x04,0xAe,0x45, // 2093-2095
  89          0x4A,0x4e,0xB9,0x0A,0x4d,0x4C,0x0d,0x15,0x41, // 2096-2098
  90          0x2d,0x92,0xB5, // 2099
  91          };
  92          //月份天数数据表
  93          uchar code day_code1[9]={0x0,0x1f,0x3b,0x5a,0x78,0x97,0xb5,0xd4,0xf3};
  94          uint code day_code2[3]={0x111,0x130,0x14e};
  95          //月修正数据表
  96          
  97          code uchar table_week[12]={0,3,3,6,1,4,6,2,5,0,3,5}; //月修正数据表
  98          
  99          uchar Conver_week(bit c,uchar year,uchar month,uchar day)
 100          {//c=0 为21世纪,c=1 为19世纪 输入输出数据均为BCD数据
 101   1          uchar temp1,temp2;
 102   1              uchar ret=0xff;
 103   1      
 104   1      //    temp1=year/16;   //BCD->hex 先把数据转换为十六进制
 105   1      //    temp2=year%16;
 106   1      //    year=temp1*10+temp2;
 107   1      //    temp1=month/16;
 108   1      //    temp2=month%16;
 109   1      //    month=temp1*10+temp2;
 110   1      //    temp1=day/16;
 111   1      //    temp2=day%16;
 112   1      //    day=temp1*10+temp2;
 113   1      
 114   1          if (c==0){year+=0x64;}  //如果为21世纪,年份数加100
 115   1          temp1=year/0x4;  //所过闰年数只算1900年之后的
 116   1          temp2=year+temp1;
C51 COMPILER V9.00   NONGLI                                                                09/01/2015 10:49:23 PAGE 3   

 117   1          temp2=temp2%0x7;  //为节省资源,先进行一次取余,避免数大于0xff,避免使用整型数据
 118   1          temp2=temp2+day+table_week[month-1];
 119   1          if (year%0x4==0&&month<3)temp2-=1;
 120   1      
 121   1              return (temp2%0x7);
 122   1      }
 123          
 124          bit get_moon_day(uchar month_p,uint code_addr)
 125          /*读取数据表中农历月的大月或小月,如果该月大返回1,小返回0*/
 126          {
 127   1              uchar temp,temp1;
 128   1              temp1=(month_p+3)/8;
 129   1              temp=0x80>>((month_p+3)%8);
 130   1              temp=year_code[code_addr+temp1]&temp;
 131   1              if(temp==0){return(0);}else{return(1);}
 132   1      }
 133          void ConverNongli(bit c,uchar yearx,uchar monthx,uchar dayx)
 134          
 135          /*==转换当前农历信息====================================*/
 136          {
 137   1              uchar year,month,day;
 138   1              uchar temp1,temp2,temp3,month_p;
 139   1              uint temp4,code_addr;
 140   1              bit flag2,flag_y;
 141   1      
 142   1              #if 0
                      temp1=yearx/16;   //BCD->hex 先把数据转换为十六进制
                  temp2=yearx%16;
                  year=temp1*10+temp2;
                  temp1=monthx/16;
                  temp2=monthx%16;
                  month=temp1*10+temp2;
                  temp1=dayx/16;
                  temp2=dayx%16;
                  day=temp1*10+temp2;
                      #else
 153   1              year =yearx&0x7f; //加载年月日数据,如为BCD 则需转为十进制
 154   1              month=monthx;
 155   1              day =dayx;
 156   1              #endif
 157   1      
 158   1              WEEK_MOON = Conver_week(c,year,month,day);
 159   1      
 160   1              code_addr=year-1; //定位数据表地址
 161   1              if(c==0)code_addr+=0x64;
 162   1              code_addr*=3;
 163   1              temp1=year_code[code_addr+2]&0x60; //取当年春节所在的公历月
 164   1              temp1=_cror_(temp1,5);
 165   1              temp2=year_code[code_addr+2]&0x1f; //取当年春节所在的公历日
 166   1              temp3=temp2-1; //计算当年春节离当年元旦的天数,春节只会在公
 167   1              if(temp1!=1)temp3+=0x1f;
 168   1              if(month<10){temp4=day_code1[month-1]+day;}
 169   1              else{temp4=day_code2[month-10]+day;}
 170   1              if((month<2)||(year%0x04!=0))temp4-=1; //如果公历月小于2 月或者该
 171   1              if (temp4>=temp3) //判断公历日在春节前还是春节后
 172   1              {
 173   2                      //公历日在春节后或就是春节当日使用下面代码进行运算
 174   2                      temp4 -=temp3;
 175   2                      month = 1;
 176   2                      flag_y = 0;
 177   2                      month_p= 1; //month_p 为月份指向,公历日在春节前或就是春节当
 178   2                      flag2=get_moon_day(month_p,code_addr); //检查该农历月为大
C51 COMPILER V9.00   NONGLI                                                                09/01/2015 10:49:23 PAGE 4   

 179   2                      if(flag2==0){temp1=29;}else{temp1=30;} //小月29 天、大月30 天
 180   2                      temp2=year_code[code_addr]&0xf0;
 181   2                      temp2=_cror_(temp2,4); //从数据表中取该年的闰月月份,如为0 则
 182   2                      while(temp4>=temp1)
 183   2                      {
 184   3                      temp4-=temp1;
 185   3                      month_p+=1;
 186   3                      if(month==temp2)
 187   3                      {
 188   4                      flag_y=~flag_y;
 189   4                      if(flag_y==0)month+=1;
 190   4                      }
 191   3                      else month+=1;
 192   3                      flag2=get_moon_day(month_p,code_addr);
 193   3                      if(flag2==0)temp1=0x1d;
 194   3                      else temp1=0x1e;
 195   3                      }
 196   2                      day=temp4+1;
 197   2              }
 198   1              else
 199   1              {
 200   2                      //公历日在春节前使用下面代码进行运算
 201   2                      temp3-=temp4;
 202   2                      if(year==0){year=0xe3;}else{year-=1;}
 203   2                      code_addr-=3;
 204   2                      month = 0xc;
 205   2                      temp2 = year_code[code_addr]&0xf0;
 206   2                      temp2 = _cror_(temp2,4);
 207   2                      flag_y = 0;
 208   2                      if(temp2==0){month_p=12;}else{month_p=13;} //如果当年有闰月,
 209   2                      flag2=get_moon_day(month_p,code_addr);
 210   2                      if(flag2==0){temp1=29;}else{temp1=30;}
 211   2                      while(temp3>temp1)
 212   2                      {
 213   3                      temp3-=temp1;
 214   3                      month_p-=1;
 215   3                      if(flag_y==0)month-=1;
 216   3                      if(month==temp2)flag_y=~flag_y;
 217   3                      flag2=get_moon_day(month_p,code_addr);
 218   3                      if(flag2==0){temp1=0x1d;}else{temp1=0x1e;}
 219   3                      }
 220   2                      day=temp1-temp3+1;
 221   2              }
 222   1              YEAR_MOON = year|c; //将农历信息写进指定变量
 223   1              MONTH_MOON = month;
 224   1              DAY_MOON = day;
 225   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    595    ----
   CONSTANT SIZE    =    624    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
